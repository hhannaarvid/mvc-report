{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
<h1 class="article-h1">Redovisningssida för mvc</h1>
    <div class="article-report">
    <p class="report-tag" id="kmom01">Kmom01</p>


        <p><strong>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</strong></p><br>
        Främst från kursen i objektorienterad python, jag läste den dock förra våren så äre ungefär ett år sedan.<br>
        <br>
        <p><strong>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</strong></p><br>
        Man bygger klasser med properties och metoder, liknande variabler och funktioner men inuti en klass. Inne i klassen så skapar men properties
        som hör till klassen samt metoder. Man kan ha publika/privata delar i klassen, oftast vill man använda sig av privata saker men att man gör 
        metoder som kan komma åt datan en "get-metod" till exempel. <br>
        <br>
        <p><strong>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</strong></p><br>
        Jag tycker det är lite knepigt med ramverk, men känns också bra att vi får lära oss för jag tror det är viktigt att känna till det inför arbetslivet. 
        Det har dock gått lättare i den här kursen än när vi använde t.ex. pico i design, kanske är det här ramverket lättare alt så 
        är det lite lättare nu för att man har lite mer koll den här gången. Jag tycker fortfarande det är lite jobbigt med så många 
        filer och mappar dock, känenr att det är mycket som jag inte vet vad det är och det stör mig. Försöker kolla upp det jag jobbar med 
        åtminstone så jag lär mig så mycket som möjligt.<br>
        <br>
        <p><strong>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</strong></p><br>
        Jag ska erkänna att jag inte har läst så mycket ur den då de var väldigt lång. Men jag kikade på templates och basics delarna och tyckte att de var tydliga och bra. 
        Har sparat artikeln för det känns som den kan vara bra om man vill kolla upp vissa saker.<br>
        <br>
        <p><strong>Vilken är din TIL för detta kmom?</strong></p><br>
            Det är lättare att jobba i det andra ramverket som man får lära sig än det första. <br>
        <br>

    <p class="report-tag" id="kmom02">Kmom02</p>

        <p><strong>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</strong></p><br>
        - Arv: man kan ha klasser som "ärver" varandra. T.ex. i mitt fall har jag en DeckOfCards, och en PrettyCards som ärver DeckOfCards. PrettyCards skapar en annan array men kan sedan använda alla metoder från DeckOfCard för att de har samma struktur.<br>
        - Komposition: Exempel med min klass DeckOfCards som innehåller Card-objekt. Alltså, DeckOfCards har en/har flera Cards. Det är komposition.<br>
        - Interface: om man använder sig av ett särskilt interface så säger man att alla klasser som gör det måste innehålla t.ex. metod "x". På så vis får man en viss tydlighet, man vet vad klassen ska kunna göra.<br>
        - trait: metoder som kan användas av flera klasser. <br>
        <p><strong>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</strong></p><br>
        Jag är nöjd. Det var svårt att komma igång för det var ett tag sedan jag programmerade objektorienterat (har läst oopython men förra året), sen kände jag att jag inte har programmerat ordentligt i php förut även om vi gjort det lite i flera kurser. Så det var en bra sak med det här kursmomentet, jag har fått programmera ordentligt med php. När jag väl kom igång så gick det bra,
         jag försökte beta av ett krav i taget med hjälp av föreläsningar och internet/discord. Jag har försökt städa lite i mina klasser men tycker alltid det blir lite rörigt när jag är mitt i det. Det går nog att städa lite mer. Det kan hända att jag har någon metod som inte används t.ex.<br>
        <br>
        <p><strong>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</strong></p><br>
        Nu är man inne i det och då tycker jag det går bra. I början känns det mest besvärligt. Men nu när man är inne i det så är det smidigt och går ganska snabbt att få till nya sidor t.ex. Så jag gillar det. <br>
        <br>
        <p><strong>Vilken är din TIL för detta kmom?</strong></p><br>
        Att det är kul att jobba såhär med att bygga en kortlek. Det blir så visuellt det man gör. Dock har det sina utmaningar också och kmom03 kommer säkert bjuda på fler.<br>
        <br>

    <p class="report-tag" id="kmom03">Kmom03</p>
        <p><strong>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</strong></p><br>
        Jag gjorde en skiss för hand först för att få ordning på tänket inför att börja skriva kod. Det blev nog som en blandning av pseudokod och flödesschema och var till god hjälp. När jag skulle "städa upp" dem inför uppgiften tyckte jag det var lätt att fastna i hur de sakerna "ska vara" och då tycker jag att man tappar poängen lite. Det är bra verktyg men det ska ju också vara till min hjälp, så jag tror det kan vara bra att ta med sig att det inte behöver vara "perfekt" flödesschema t.ex. utan sålänge det hjälper en att få lite struktur kring tänket i det man ska göra så har det fyllt sitt syfte.<br>
        <br>
        <p><strong> Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</strong></p><br>
        Jag gjorde som nämnt ovan, det första jag gjorde var att skissa på upplägget av kortspelet. Det var väldigt basic och mest i stora drag men var till god hjälp. Sen använde jag mig av en del kod jag skrivit tidigare (kmom02) och även övningen därifrån som också var till god hjälp. Som vanligt hade jag lite svårt att komma igång men när jag väl var det så rullade det på bra. Jag är nöjd med mitt kortspel. Ett undantag är banken, den är ganska dum i mitt spel vilket gör det rätt enkelt att vinna. Så ska man bygga ut det eller förbättra det så kan man försöka få banken lite mer skärpt. Men den fyller sin funktion. Jag är nöjd med mina klasser som jag hade sedan tidigare, jag behövde bara lägga till en metod för att hämta värdet på ett kort. Annars hade jag redan det jag behövde.<br>
        <br>
        <p><strong>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</strong></p><br>
        Jag har nog inget nytt att säga mot hur jag känt tidigare. Det är hyfsat smidigt när man kommit igång men ibland kan det störa mig att det är så väldigt många filer och mappar och att jag inte har exakt koll på vad alla gör. Men det är kanske mitt kontrollbehov. Det är ju inget som hindrar mig från att kolla upp det heller, men jag haft har fullt upp att skriva kod och lösa kursmomenten och jag har tillräcklig koll för det.<br>
        <br>
        <p><strong>Vilken är din TIL för detta kmom?</strong></p><br>
        Att flödesscheman/pseudokod är väldigt användbart när man ska ta sig an en ny uppgift för att få lite överblick på hur man ska gå till väga. Berget känns inte riktigt lika stort att bestiga (sålänge man inte fastnar i detaljer om att göra just t.ex. flödesschemat perfekt som jag nämnde på första punkten).<br>
        <br>


    <p class="report-tag" id="kmom04">Kmom04</p>


        <p><strong>Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit 
            och hur du upplever phpunit rent allmänt.</strong></p><br>
        Jag tycker det är kul att skriva tester, men det jag kände när jag skrev koden och testade med phpunit att den godkände bara man inte hade något uppenbart fel. När jag körde linten sen så
        hade den feedback på grejer i testerna som inte fungerade tipptopp, t.ex. assertIsTrue-sats som alltid blir True men som jag inte hade tänkt på. Annars tycker jag phpunit 
        var trevligt och jag uppskattade att man kunde få visuellt på docs/coverage, det gjorde en motiverad till att göra testerna.<br>
        <br>
        <p><strong>Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?</strong></p><br>
        Jag lyckades med 100% på mina klasser och metoder. Det känns bra.<br>
        <br>
        <p><strong>Upplever du din egen kod som “testbar kod” eller finns det delar i koden 
            som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?</strong></p><br>
        Generellt testbar, däremot så upptäcker man ju saker i koden som jag skulle göra annorlunda om jag skulle skriva den igen. Jag hittade en metod som inte används alls, 
        som jag kommenterade ut. Det fanns fler grejer men jag är lite försiktig med att ändra sånt nu för risk att det sabbar någon annanstans.<br>
        <br>
        <p><strong>Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, 
            om så berätta lite hur du tänkte.</strong></p><br>
        Se ovan. Jag skrev generellt inte om något för testernas skull. Gjorde däremot små ändringar i koden generellt, mest grejer jag 
        hittade om behövde snyggas till eller som inte används.<br>
        <br>
        <p><strong>Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.</strong></p><br>
        Ja och nej. jag tror det är fullt möjligt att skriva "ful" kod som ändå är testbar. Men är den bra testbar så kanske den ändå är "finare" än kod som inte är lika testbar. 
        Jag vet inte. Summa sumarum så skadar det nog aldrig att den är testbar men jag tror inte att man bara kan förlita sig på det om man vill ha så fin kod som möjligt. <br>
        <br>
        <p><strong>Vilken är din TIL för detta kmom?</strong></p><br>
        Det är kul att skriva tester tycker jag, bara man kommit igång med det. Jag har mycket att lära dock, det känns 
        som att det är ett speciellt sätt att tänka för att få bra tester. Jag vet inte hur bra mina är men förhoppnignsvis så fyller 
        de sin funktion i alla fall.<br>
        <br>

    <p class="report-tag" id="kmom05">Kmom05</p>


    <p><strong>Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen?</strong></p><br>
    Knepigt till en början när jag inte först förstod vad Doctrine var. När man väl kom in i det så var det ju faktiskt smidigt. Jag skulle gärna jobba mer med det så man lär sig det ordentligt, men kursmomentet räckte för att få översiktlig kunskap och få ordning på en del grejer.<br>
    <br>
    <p><strong>Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet?</strong></p><br>
    Jag tänkte väl egentligen less is more. Började att bygga upp vyn där man ser alla böcker, satsade på en stilren tabell. Därifrån kan man klicka sig vidare till t.ex. info om en bok. Alt kan man klicka på uppdatera eller ta bort från första vyn.<br>
    <br>
    <p><strong>Gick det bra att jobba med ORM i CRUD eller vad anser du om det, jämför gärna med andra sätt att jobba med databaser?</strong></p><br>
    Det gick bra tack vare genomgången, det var rätt smidigt när man väl var igång för att det känns som man behövde skriva mindre kod än när vi jobbat mot databaser på andra sätt. Däremot var det lite knepigt först för man var tvungen att sätta sig in i ännu ett nytt sätt att arbeta. <br>
    <br>
    <p><strong>Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?</strong></p><br>
    Jag tycker det har sagts lite redan på ovan punkter. Vid första anblick knepigt, men sen smidigt. Som sagt innan på kändes det som att man kunde "komma undan" med mindre kod när man väl var igång. Jag vet inte om det bara var känslan eller om det faktiskt är så. Kanske också kan bero lite på vad man gör. Smidigt i alla fall.<br>
    <br>
    <p><strong>Vilken är din TIL för detta kmom?</strong></p><br>
    Att Doctrine var rätt trevligt när man kommit igång, även om det var läskigt vid första anblick för att det kändes främmande och invecklat.<br>
    <br>
    <p class="report-tag" id="kmom06">Kmom06</p>
    <p class="report-tag" id="projekt">kmom07/10 projekt</p>
</div>


{% endblock %}